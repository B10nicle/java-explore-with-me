{
	"info": {
		"_postman_id": "34dd9dc4-1068-4964-877b-1f50be55091f",
		"name": "sprint18/comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22427952"
	},
	"item": [
		{
			"name": "Add comments",
			"item": [
				{
					"name": "Add new comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response 201 and body in JSON\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Comment should have following fields: id, userName, eventId, text, created\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('userName');\r",
									"pm.expect(target).to.have.property('eventId');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('created');\r",
									"});\r",
									"\r",
									"pm.test(\"Data in response should equal data in request\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.userName).to.not.be.null;\r",
									"    pm.expect(target.eventId).to.not.be.null;\r",
									"    pm.expect(source.text).equal(target.text, 'Response text should equal request text');\r",
									"    pm.expect(target.created).to.not.be.null;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"I like this event!\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "25"
								},
								{
									"key": "eventId",
									"value": "15"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response 201 and body in JSON\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Comment should have following fields: id, userName, eventId, text, created\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('userName');\r",
									"pm.expect(target).to.have.property('eventId');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('created');\r",
									"});\r",
									"\r",
									"pm.test(\"Data in response should equal data in request\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.userName).to.not.be.null;\r",
									"    pm.expect(target.eventId).to.not.be.null;\r",
									"    pm.expect(source.text).equal(target.text, 'Response text should equal request text');\r",
									"    pm.expect(target.created).to.not.be.null;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"I like this event!\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "34"
								},
								{
									"key": "eventId",
									"value": "19"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response 201 and body in JSON\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Comment should have following fields: id, userName, eventId, text, created\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('userName');\r",
									"pm.expect(target).to.have.property('eventId');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('created');\r",
									"});\r",
									"\r",
									"pm.test(\"Data in response should equal data in request\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.userName).to.not.be.null;\r",
									"    pm.expect(target.eventId).to.not.be.null;\r",
									"    pm.expect(source.text).equal(target.text, 'Response text should equal request text');\r",
									"    pm.expect(target.created).to.not.be.null;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"I like this event!\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "31"
								},
								{
									"key": "eventId",
									"value": "18"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new comment without body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "25"
								},
								{
									"key": "eventId",
									"value": "15"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add short comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Hi!\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "25"
								},
								{
									"key": "eventId",
									"value": "15"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add blank comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"     \"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "25"
								},
								{
									"key": "eventId",
									"value": "15"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete comments",
			"item": [
				{
					"name": "Delete not your comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response 409 and body in JSON\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "20"
								},
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete comment that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response 404 and body in JSON\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "20"
								},
								{
									"key": "commentId",
									"value": "33"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete comment by user that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response 404 and body in JSON\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "202"
								},
								{
									"key": "commentId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete comment by admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete comment which does not exist by admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "33"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update comments",
			"item": [
				{
					"name": "Update comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response 200 and body in JSON\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Comment should have following fields: id, userName, eventId, text, created\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('userName');\r",
									"pm.expect(target).to.have.property('eventId');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('created');\r",
									"});\r",
									"\r",
									"pm.test(\"Data in response should equal data in request\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.userName).to.not.be.null;\r",
									"    pm.expect(target.eventId).to.not.be.null;\r",
									"    pm.expect(source.text).equal(target.text, 'Response text should equal request text');\r",
									"    pm.expect(target.created).to.not.be.null;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"My updated comment\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "25"
								},
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update wrong comment by user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response 409 and body in JSON\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"My updated comment\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "34"
								},
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update by user comment that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response 404 and body in JSON\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"My updated comment\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "34"
								},
								{
									"key": "commentId",
									"value": "111"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update comment by admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response 200 and body in JSON\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Comment should have following fields: id, userName, eventId, text, created\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('userName');\r",
									"pm.expect(target).to.have.property('eventId');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('created');\r",
									"});\r",
									"\r",
									"pm.test(\"Data in response should equal data in request\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.userName).to.not.be.null;\r",
									"    pm.expect(target.eventId).to.not.be.null;\r",
									"    pm.expect(source.text).equal(target.text, 'Response text should equal request text');\r",
									"    pm.expect(target.created).to.not.be.null;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Updated comment\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get comments by user",
			"item": [
				{
					"name": "Add comment by user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response 200 and body in JSON\", function () {\r",
									"    pm.response.to.have.status(200);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Comment should have following fields: id, userName, eventId, text, created\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('userName');\r",
									"pm.expect(target).to.have.property('eventId');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('created');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "25"
								},
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get comment by another user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response 409 and body in JSON\", function () {\r",
									"    pm.response.to.have.status(409);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "33"
								},
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get comment by user that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response 404 and body in JSON\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "333"
								},
								{
									"key": "commentId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get comment that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response 404 and body in JSON\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "34"
								},
								{
									"key": "commentId",
									"value": "222"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get comments by admin",
			"item": [
				{
					"name": "Get comment that does not exist by admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response 404 and body in JSON\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "111"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get comment events that does not exist by admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response 404 and body in JSON\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/comments?eventId=199&from=0&size=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "199"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		}
	]
}